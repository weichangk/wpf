<Window x:Class="WpfStudy._03控件布局._01Grid"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfStudy._03控件布局"
        mc:Ignorable="d"
        Title="01Grid" Height="600" Width="800" Background="Pink">
    <Grid Margin="10" UseLayoutRounding="True">
        <!--ShowGridLines="True" 显示网格线
        
        UseLayoutRounding 绘制对齐像素的清晰显示的线条 https://cloud.tencent.com/developer/article/1341133
        当你用WPF显示控件时，时不时会发现控件或字体出现虚虚的状态。
        例如：DataGrid的Header，一栏显示得很清晰，隔壁显示的就有些模糊。
        查了下资料，是因为WPF编程是与特理显示设备无关，用的是逻辑单位。
        这个逻辑单位在转换成特理单位的过程中，比如转换成像素点的时候，可以出现小数，比如：0.5像素，这个时候是没有办法在特理设备上显示的，所以WPF的策略是在它的两边以虚框显示。
        这样对于整体来讲就是虚虚地。若想解决这个问题，最好的方式是加上UseLayoutRounding，如果这个特性不能解决问题，就可以控件中把SnapsToDevicePixels特性加上。Stackoverflow上的一个回答是建议用UseLayoutRounding。
        -->
        <Grid.RowDefinitions>
            <!--定义行-->
            <!--对于行高和列宽可以设置三类值：
                绝对值：double数值加单位px后缀，px像素是默认后缀可省略。绝对值的特点是一经设定就不会再改变，所以又称固定值。当控件的宽度和高度不需要改变或者使用空行、空列作为控件间隔时，绝对值是不二之选。
                比例值：double数值加*。解析器会把所有比例值的数值加起来作为分母、把每个比例值的数值作为分子，再用这个分数值乘以未被占用空间的像素数，得到的结果就是分配给这个比例值的最终像素数。比例值最大的特点是当UI的整体尺寸改变后，它会保持固有的比例。
                自动值：自动值(字符串“Auto")为行高或列宽赋值，行高或列宽的实际值将由行列内控件的高度和宽度决定。
            -->
            <RowDefinition Height="25"></RowDefinition>
            <RowDefinition Height="4"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="4"></RowDefinition>
            <RowDefinition Height="25"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <!--定义列-->
            <ColumnDefinition Width="Auto" MinWidth="120"></ColumnDefinition>
            <ColumnDefinition Width="5"></ColumnDefinition>
            <ColumnDefinition Width="*" MinWidth="120"></ColumnDefinition>
            <ColumnDefinition Width="80"></ColumnDefinition>
            <ColumnDefinition Width="4"></ColumnDefinition>
            <ColumnDefinition Width="80"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <TextBlock Text="请选择您的部门并留言：" VerticalAlignment="Center" Margin="5,0,5,0"></TextBlock>
        <!--VerticalAlignment 描述如何在父级布局槽内垂直地定位或拉伸子元素。-->
        <GridSplitter Width="3" VerticalAlignment="Stretch" HorizontalAlignment="Center" Grid.Column="1" Grid.RowSpan="5" Background="Green"></GridSplitter>
        <!--GridSplitter 分割窗口-->
        <ComboBox Grid.Row="0" Grid.Column="2" Grid.ColumnSpan="4"></ComboBox>
        <!--Grid.ColumnSpan Grid.RowSpan 横跨列 行 属性-->
        <TextBox Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="4" BorderBrush="Black"></TextBox>
        <!--BorderBrush 获取或设置一个用于描述控件的边框背景的画笔-->
        <Button Grid.Row="5" Grid.Column="3" Content="提交"></Button>
        <Button Grid.Row="5" Grid.Column="5" Content="清除"></Button>
        <!--如果把两个元素放在Grid的同一个单元格内，则代码中后书写的元素将盖在先书写的元素之上，如果想让盖在后面的元素显示出来，可以把上面元素的 Visibility 设置为 Hidden 或 Collapsed，也可以把上面元素的 Opacity 属性设置为0。-->
    </Grid>
</Window>
